<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Email Message</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }
    .email-container {
      max-width: 600px;
      margin: 20px auto;
      background-color: #ffffff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .email-header {
      text-align: center;
      background-color: #007bff;
      color: white;
      padding: 10px 0;
      border-radius: 8px 8px 0 0;
    }
    .email-body {
      padding: 20px;
      text-align: left;
      line-height: 1.6;
    }
    .email-footer {
      text-align: center;
      padding: 10px;
      font-size: 12px;
      color: #888888;
    }
    a.button {
      display: inline-block;
      background-color: #007bff;
      color: #ffffff;
      padding: 10px 20px;
      border-radius: 5px;
      text-decoration: none;
      margin-top: 10px;
    }
    a.button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>

  <div class="email-container">
    <div class="email-header">
      <h1>Welcome to CoolZoneMaster</h1>
    </div>
    
    <div class="email-body">
      <p>Hi <strong>{{userName}}</strong>,</p>
      <p>We are excited to have you onboard! This is just a quick message to welcome you and let you know that weâ€™re always here if you have any questions.</p>

      <p>Click the button below to get started:</p>
      <p><a href="https://coolzonemaster.com/start" class="button">Get Started</a></p>
      
      <p>Thank you,<br>
      The CoolZoneMaster Team</p>
    </div>
    
    <div class="email-footer">
      <p>&copy; 2024 CoolZoneMaster. All rights reserved.</p>
    </div>
  </div>

</body>
</html>







 
// ! this is new 
"use client";
import { useEffect, useState } from 'react';
import styles from './speech.module.css';

const stripHtmlTags = (html) => {
  if (typeof window !== "undefined") {
    const doc = new DOMParser().parseFromString(html, "text/html");
    return doc.body.textContent || "";
  }
  return html;
};

const TextToSpeechPlayer = ({ article }) => {
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [selectedVoice, setSelectedVoice] = useState('UK English Female');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [progress, setProgress] = useState(0);
  const [totalTime, setTotalTime] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [translatedText, setTranslatedText] = useState('');
  const [isTranslationReady, setIsTranslationReady] = useState(false);

  // Voice and language options stored as arrays
  const voiceOptions = [
    // { label: 'UK English Female', value: 'UK English Female' },
    // { label: 'UK English Male', value: 'UK English Male' },
    // { label: 'US English Female', value: 'US English Female' },
    // { label: 'US English Male', value: 'US English Male' },
    // { label: 'Spanish Female', value: 'Spanish Female' },
    // { label: 'Spanish Male', value: 'Spanish Male' },
    { label: 'French Female', value: 'French Female' },
    { label: 'French Male', value: 'French Male' },
    { label: 'German Female', value: 'German Female' },
    { label: 'German Male', value: 'German Male' },
    { label: 'Hindi Female', value: 'Hindi Female' },
    { label: 'Urdu Male', value: 'Urdu Male' },
    { label: 'Urdu Female', value: 'Urdu Female' },
    { label: 'Arabic Female', value: 'Arabic Female' },
    { label: 'Arabic Male', value: 'Arabic Male' },
    { label: 'Russian Female', value: 'Russian Female' },
    { label: 'Russian Male', value: 'Russian Male' },
    { label: 'Japanese Female', value: 'Japanese Female' },
    { label: 'Japanese Male', value: 'Japanese Male' },
    { label: 'Chinese Female', value: 'Chinese Female' },
    { label: 'Chinese Male', value: 'Chinese Male' },
    { label: 'Portuguese Female', value: 'Portuguese Female' },
    { label: 'Portuguese Male', value: 'Portuguese Male' },
    { label: 'Brazilian Portuguese Female', value: 'Brazilian Portuguese Female' },
    { label: 'Brazilian Portuguese Male', value: 'Brazilian Portuguese Male' },
    { label: 'Italian Female', value: 'Italian Female' },
    { label: 'Italian Male', value: 'Italian Male' },
  ];

  const languageOptions = [
    { label: 'English', value: 'en',voice: [{ label: 'UK English Female', value: 'UK English Female' }, { label: 'UK English Male', value: 'UK English Male' },{ label: 'US English Female', value: 'US English Female' }, { label: 'US English Male', value: 'US English Male' }] },
    { label: 'Spanish', value: 'es' ,voice: [{ label: 'Spanish Female', value: 'Spanish Female' }, { label: 'Spanish Male', value: 'Spanish Male' }] },
    { label: 'French', value: 'fr',voice: [{ label: 'French Female', value: 'French Female' }, { label: 'French Male', value: 'French Male' }] },
    { label: 'German', value: 'de',voice: [{ label: 'German Female', value: 'German Female' }, { label: 'German Male', value: 'German Male' }] },
    { label: 'Hindi', value: 'hi' ,voice: [{ label: 'Hindi Female', value: 'Hindi Female' }, { label: 'Urdu Male', value: 'Urdu Male' }, { label: 'Urdu Female', value: 'Urdu Female' }] },
    { label: 'Urdu', value: 'ur',voice: [{ label: 'Urdu Male', value: 'Urdu Male' }, { label: 'Urdu Female', value: 'Urdu Female' }] },
    { label: 'Arabic', value: 'ar',voice: [{ label: 'Arabic Female', value: 'Arabic Female' }, { label: 'Arabic Male', value: 'Arabic Male' }] },
    { label: 'Russian', value: 'ru' ,voice: [{ label: 'Russian Female', value: 'Russian Female' }, { label: 'Russian Male', value: 'Russian Male' }] },
    { label: 'Japanese', value: 'ja',voice: [{ label: 'Japanese Female', value: 'Japanese Female' }, { label: 'Japanese Male', value: 'Japanese Male' }] },
    { label: 'Chinese', value: 'zh' ,voice: [{ label: 'Chinese Female', value: 'Chinese Female' }, { label: 'Chinese Male', value: 'Chinese Male' }] },
    { label: 'Portuguese', value: 'pt',voice: [{ label: 'Portuguese Female', value: 'Portuguese Female' }, { label: 'Portuguese Male', value: 'Portuguese Male' }] },
    { label: 'Brazilian Portuguese', value: 'pt-BR' ,voice: [{ label: 'Brazilian Portuguese Female', value: 'Brazilian Portuguese Female' }, { label: 'Brazilian Portuguese Male', value: 'Brazilian Portuguese Male' }] },
    { label: 'Italian', value: 'it' ,voice: [{ label: 'Italian Female', value: 'Italian Female' }, { label: 'Italian Male', value: 'Italian Male' }] },
    { label: 'Indonesian', value: 'id' ,voice: [{ label: 'Indonesian Female', value: 'Indonesian Female' }, { label: 'Indonesian Male', value: 'Indonesian Male' }] },
    { label: 'Turkish', value: 'tr',voice: [{ label: 'Turkish Female', value: 'Turkish Female' }, { label: 'Turkish Male', value: 'Turkish Male' }] },
    { label: 'Persian (Farsi)', value: 'fa' ,voice: [{ label: 'Persian (Farsi) Female', value: 'Persian (Farsi) Female' }, { label: 'Persian (Farsi) Male', value: 'Persian (Farsi) Male' }] },
    { label: 'Korean', value: 'ko' ,voice: [{ label: 'Korean Female', value: 'Korean Female' }, { label: 'Korean Male', value: 'Korean Male' }] },
    { label: 'Polish', value: 'pl' , voice: [{ label: 'Polish Female', value: 'Polish Female' }, { label: 'Polish Male', value: 'Polish Male' }] },
    { label: 'Dutch', value: 'nl' , voice: [{ label: 'Dutch Female', value: 'Dutch Female' }, { label: 'Dutch Male', value: 'Dutch Male' }] },
    { label: 'Swedish', value: 'sv' , voice: [{ label: 'Swedish Female', value: 'Swedish Female' }, { label: 'Swedish Male', value: 'Swedish Male' }] },
    { label: 'Finnish', value: 'fi' , voice: [{ label: 'Finnish Female', value: 'Finnish Female' }, { label: 'Finnish Male', value: 'Finnish Male' }] },
    { label: 'Danish', value: 'da' , voice: [{ label: 'Danish Female', value: 'Danish Female' }, { label: 'Danish Male', value: 'Danish Male' }] },
    { label: 'Norwegian', value: 'no' , voice: [{ label: 'Norwegian Female', value: 'Norwegian Female' }, { label: 'Norwegian Male', value: 'Norwegian Male' }] },
    { label: 'Romanian', value: 'ro' , voice: [{ label: 'Romanian Female', value: 'Romanian Female' }, { label: 'Romanian Male', value: 'Romanian Male' }] },
    { label: 'Thai', value: 'th', voice: [{ label: 'Thai Female', value: 'Thai Female' }, { label: 'Thai Male', value: 'Thai Male' }] },
    { label: 'Vietnamese', value: 'vi' , voice: [{ label: 'Vietnamese Female', value: 'Vietnamese Female' }, { label: 'Vietnamese Male', value: 'Vietnamese Male' }] },
    { label: 'Greek', value: 'el' , voice: [{ label: 'Greek Female', value: 'Greek Female' }, { label: 'Greek Male', value: 'Greek Male' }] },
  ];

  let text = stripHtmlTags(article);

  // Translate text using Gemini API
  // const translateText = async (text, targetLang = 'en') => {
  //   const apiKey = process.env.NEXT_PUBLIC_GEMINI_KEY;
  //   const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
  //   try {
  //     const response = await fetch(url, {
  //       method: 'POST',
  //       headers: { 'Content-Type': 'application/json' },
  //       body: JSON.stringify({
  //         contents: [
  //           {
  //             parts: [{ text: `Translate the following text to ${targetLang}: ${text}` }]
  //           }
  //         ]
  //       }),
  //     });
  //     if (!response.ok) {
  //       const errorData = await response.json();
  //       console.error('Translation error:', errorData);
  //       return '';
  //     }
  //     const data = await response.json();
  //     if (data.candidates && data.candidates.length > 0) {
  //       const candidate = data.candidates[0];
  //       if (candidate && candidate.content && candidate.content.parts.length > 0) {
  //         return candidate.content.parts[0].text || '';
  //       }
  //     }
  //     return '';
  //   } catch (error) {
  //     console.error('Translation error:', error);
  //     return '';
  //   }
  // };

  const translateText = async (text, targetLang = 'en') => {
    // If the target language is English, return the original text
    if (targetLang === 'en') {
      return text;
    }
  
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_KEY;
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
  
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: `Translate the following text to ${targetLang}: ${text}` }]
            }
          ]
        }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Translation error:', errorData);
        return '';
      }
  
      const data = await response.json();
      if (data.candidates && data.candidates.length > 0) {
        const candidate = data.candidates[0];
        if (candidate && candidate.content && candidate.content.parts.length > 0) {
          return candidate.content.parts[0].text || '';
        }
      }
      return '';
    } catch (error) {
      console.error('Translation error:', error);
      return '';
    }
  };
  

  useEffect(() => {
    const fetchTranslation = async () => {
      setIsTranslationReady(false);
      const translated = await translateText(text, selectedLanguage);
      // const translated = !selectedLanguage=='en'?await translateText(text, selectedLanguage):text;
      // console.log(translated);
      setTranslatedText(translated);
      setIsTranslationReady(!!translated);
    };
    fetchTranslation();
  }, [selectedLanguage]);

  // Play and stop speech functionality
  const playSpeech = async () => {
    if (window.responsiveVoice && !isSpeaking && isTranslationReady) {
      setIsSpeaking(true);
      window.responsiveVoice.speak(translatedText, selectedVoice, {
        onend: () => {
          setIsSpeaking(false);
          setProgress(0);
          setCurrentTime(0);
        },
        onboundary: (event) => {
          setCurrentTime(event.elapsedTime);
          setProgress((event.elapsedTime / totalTime) * 100);
        },
      });
    }
  };

  const stopSpeech = () => {
    if (window.responsiveVoice && isSpeaking) {
      window.responsiveVoice.cancel();
      setIsSpeaking(false);
      setProgress(0);
      setCurrentTime(0);
    }
  };

  return (
    <div className={styles.speechPlayer}>
      <b>Voice Text-to-Speech</b>
      <div className={styles.voiceSelector}>
        <label htmlFor="voice">Select Voice:</label>
        <select
          id="voice"
          value={selectedVoice}
          onChange={(e) => setSelectedVoice(e.target.value)}
          aria-label="Select Voice">
          {/* {voiceOptions.map((voice, index) => (
            <option key={index} value={voice.value}>
              {voice.label}
            </option>
          ))} */}
           {languageOptions?.voice.map((voice, index) => (
            <option key={index} value={voice.value}>
              {voice.label}
            </option>
          ))}
        </select>
      </div>

      <div className={styles.voiceSelector}>
        <label htmlFor="language">Select Language:</label>
        <select
          id="language"
          value={selectedLanguage}
          onChange={(e) => setSelectedLanguage(e.target.value)}
          aria-label="Select Language">
          {languageOptions.map((language, index) => (
            <option key={index} value={language.value}>
              {language.label}
            </option>
          ))}
        </select>
      </div>

      <div className={styles.controls}>
        <button
          onClick={isSpeaking ? stopSpeech : playSpeech}
          aria-label={isSpeaking ? 'Stop Speech' : 'Play Speech'}
          disabled={!isTranslationReady}>
          {isSpeaking ? 'Stop' : !isTranslationReady? 'Loading...':'Play'}
         </button>
      </div>

      {totalTime > 0 && (
        <div className={styles.progressContainer}>
          <p>Progress: {Math.round(progress)}%</p>
          <progress value={progress} max="100"></progress>
          <p>Time: {Math.round(currentTime)}s / {Math.round(totalTime)}s</p>
        </div>
      )}
    </div>
  );
};

export default TextToSpeechPlayer;











// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime?  @default(now()) // Make this optional
  updatedAt     DateTime?  @updatedAt      // Make this optional
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  Question      Question[]
  
 likedPosts Like[] // Relation to the Like model
  ratings    Rating[] // Relation to the Rating model
}

model EmailTemplate {
  id           String   @id @default(cuid()) @map("_id")
  templateType String   @unique
  subject      String
  textBody     String
  htmlBody     String
}



model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id           String  @id @default(cuid()) @map("_id")
  slug         String  @unique
  title        String
  color          String?
  categoryDesc String? @default(" ")
  posts        Post[]
}

model Like {
  id      String   @id @default(cuid()) @map("_id")
  postId  String
  post    Post     @relation(fields: [postId], references: [id])
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  ratings Rating[] // Relation to the Rating model

  // Unique constraint to prevent the same user from liking the same post multiple times
  @@unique([postId, userId])
}
model Post {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now())
  slug          String    @unique
  title         String
  desc          String
  img           String?
  imgAlt        String?
  views         Int       @default(0)
  catSlug       String?
  cat           Category?  @relation(fields: [catSlug], references: [slug])
  userEmail     String
  user          User      @relation(fields: [userEmail], references: [email])
  comments      Comment[]
  questions     Question[]
  updatedAt     DateTime  @updatedAt
  metaTitle     String?   @default("ah")
  metaDisc      String?   @default("as")
  metaKeywords  String?   @default("as")
  metaAuthor    String?   @default("ahs")
  metaRobots    String?   @default("asj")
  doctor        String?   @default("doctor")

  totalRating   Json      @default("{}")  
  totalLikes    Int       @default(0)     
  ratings       Rating[]
  likes         Like[]     
  artical       Json      @default("{}")  
  fqa           Json      @default("[]")
}
 
model Rating {
  id     String  @id @default(cuid()) @map("_id")
  rating Int
  postId String
  post   Post    @relation(fields: [postId], references: [id])
  userId String
  user   User    @relation(fields: [userId], references: [id])
  Like   Like?   @relation(fields: [likeId], references: [id])
  likeId String?

  @@unique([postId, userId])  
}

model Question {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  desc      String
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post      @relation(fields: [postSlug], references: [slug])
  isRead    Boolean   @default(false)
  answer    String?
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model Access {
  id      String  @id @default(cuid()) @map("_id")
  name    String
  email   String
  isAdmin Boolean @default(false)
}

model Contact {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model Varifydoctor {
  id         String   @id @default(cuid()) @map("_id")
  image      String?
  coverImage String?
  photo      String?
  name       String
  degree     String
  experience String?
  message    String
  createdAt  DateTime @default(now())
  specialist String?
}

